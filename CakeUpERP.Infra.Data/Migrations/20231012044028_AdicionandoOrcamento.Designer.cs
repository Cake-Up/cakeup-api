// <auto-generated />
using System;
using CakeUpERP.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CakeUpERP.Infra.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231012044028_AdicionandoOrcamento")]
    partial class AdicionandoOrcamento
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CakeUpERP.Domain.Entities.ClienteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<int>("IdCompanhia")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdCompanhia");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.CompanhiaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NomeSite")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("UrlImagem")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("companhia", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cnpj = "64547425000106",
                            DataCriacao = new DateTime(2023, 10, 12, 1, 40, 27, 661, DateTimeKind.Local).AddTicks(1702),
                            Nome = "Companhia 01 Ltda",
                            UrlImagem = ""
                        });
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.IngredienteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("CustoUnitario")
                        .HasPrecision(5, 2)
                        .HasColumnType("float");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUnidadeMedida")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QtdPorEmbalagem")
                        .HasColumnType("int");

                    b.Property<int>("TipoEmbalagem")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ingrediente", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.MovimentacoesIngredientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataMovimentacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataValidade")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("IdIngrediente")
                        .HasColumnType("int");

                    b.Property<int?>("IdReceita")
                        .HasColumnType("int");

                    b.Property<float>("Preco")
                        .HasColumnType("float");

                    b.Property<int>("QtdProduto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdIngrediente");

                    b.HasIndex("IdReceita");

                    b.ToTable("movimentacoesIngredientes", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.ObservacaoClienteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataObservacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.ToTable("observacao_cliente", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.OrcamentoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodReferencia")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataEvento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataOrcamento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdStatusOrcamento")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CodReferencia")
                        .IsUnique();

                    b.HasIndex("IdCliente");

                    b.ToTable("Orcamento", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.PedidoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataEvento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdOrcamento")
                        .HasColumnType("int");

                    b.Property<int>("IdStatusPedido")
                        .HasColumnType("int");

                    b.Property<float>("ValorTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdOrcamento")
                        .IsUnique();

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.ReceitaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("CustoReceita")
                        .HasPrecision(5, 2)
                        .HasColumnType("float");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataPreparo")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EndereçoImagem")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ModoDePreparo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<float>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("Rendimento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("receita", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.RlIngredientesReceita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdIngrediente")
                        .HasColumnType("int");

                    b.Property<int>("IdReceita")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdIngrediente");

                    b.HasIndex("IdReceita");

                    b.ToTable("rlIngredientesReceita", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.RlItensOrcamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IdIngrediente")
                        .HasColumnType("int");

                    b.Property<int?>("IdReceita")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<int?>("OrcamentoEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdIngrediente");

                    b.HasIndex("IdReceita");

                    b.HasIndex("OrcamentoEntityId");

                    b.ToTable("itensOrcamento", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.RlUtensiliosReceita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdReceita")
                        .HasColumnType("int");

                    b.Property<int>("IdUtensilio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdReceita");

                    b.HasIndex("IdUtensilio");

                    b.ToTable("rlUtensiliosReceita", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.UsuarioEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("CompanhiaId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExpiracaoRefreshToken")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("IdCompanhia")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasMaxLength(32)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.HasIndex("CompanhiaId");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.UtensiliosEEquipamentosEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CustoCompra")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdReceita")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReceitaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoUtensilio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.ToTable("utensiliosEEquipamentos", (string)null);
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.ClienteEntity", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.CompanhiaEntity", "Companhia")
                        .WithMany("Clientes")
                        .HasForeignKey("IdCompanhia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companhia");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.MovimentacoesIngredientes", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.IngredienteEntity", "Ingrediente")
                        .WithMany("MovimentacoesIngredientes")
                        .HasForeignKey("IdIngrediente");

                    b.HasOne("CakeUpERP.Domain.Entities.ReceitaEntity", "Receita")
                        .WithMany("MovimentacoesIngredientes")
                        .HasForeignKey("IdReceita");

                    b.Navigation("Ingrediente");

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.ObservacaoClienteEntity", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.ClienteEntity", "Cliente")
                        .WithMany("ObservacaoClienteEntities")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.OrcamentoEntity", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.ClienteEntity", "Cliente")
                        .WithMany("OrcamentosCliente")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.PedidoEntity", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.ClienteEntity", "Cliente")
                        .WithMany("PedidosCliente")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeUpERP.Domain.Entities.OrcamentoEntity", "Orcamento")
                        .WithOne("Pedido")
                        .HasForeignKey("CakeUpERP.Domain.Entities.PedidoEntity", "IdOrcamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Orcamento");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.RlIngredientesReceita", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.IngredienteEntity", "Ingrediente")
                        .WithMany("ReceitasIngredientes")
                        .HasForeignKey("IdIngrediente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeUpERP.Domain.Entities.ReceitaEntity", "Receita")
                        .WithMany("IngredientesReceita")
                        .HasForeignKey("IdReceita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.RlItensOrcamento", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.IngredienteEntity", "Ingrediente")
                        .WithMany("RlItensOrcamentos")
                        .HasForeignKey("IdIngrediente");

                    b.HasOne("CakeUpERP.Domain.Entities.ReceitaEntity", "Receita")
                        .WithMany("RlItensOrcamentos")
                        .HasForeignKey("IdReceita");

                    b.HasOne("CakeUpERP.Domain.Entities.OrcamentoEntity", null)
                        .WithMany("ItensOrcamentos")
                        .HasForeignKey("OrcamentoEntityId");

                    b.Navigation("Ingrediente");

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.RlUtensiliosReceita", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.ReceitaEntity", "Receita")
                        .WithMany("UtensiliosEEquipamentos")
                        .HasForeignKey("IdReceita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeUpERP.Domain.Entities.UtensiliosEEquipamentosEntity", "Utensilios")
                        .WithMany("ReceitasUtensilios")
                        .HasForeignKey("IdUtensilio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receita");

                    b.Navigation("Utensilios");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.UsuarioEntity", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.CompanhiaEntity", "Companhia")
                        .WithMany()
                        .HasForeignKey("CompanhiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companhia");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.UtensiliosEEquipamentosEntity", b =>
                {
                    b.HasOne("CakeUpERP.Domain.Entities.ReceitaEntity", "Receita")
                        .WithMany()
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.ClienteEntity", b =>
                {
                    b.Navigation("ObservacaoClienteEntities");

                    b.Navigation("OrcamentosCliente");

                    b.Navigation("PedidosCliente");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.CompanhiaEntity", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.IngredienteEntity", b =>
                {
                    b.Navigation("MovimentacoesIngredientes");

                    b.Navigation("ReceitasIngredientes");

                    b.Navigation("RlItensOrcamentos");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.OrcamentoEntity", b =>
                {
                    b.Navigation("ItensOrcamentos");

                    b.Navigation("Pedido")
                        .IsRequired();
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.ReceitaEntity", b =>
                {
                    b.Navigation("IngredientesReceita");

                    b.Navigation("MovimentacoesIngredientes");

                    b.Navigation("RlItensOrcamentos");

                    b.Navigation("UtensiliosEEquipamentos");
                });

            modelBuilder.Entity("CakeUpERP.Domain.Entities.UtensiliosEEquipamentosEntity", b =>
                {
                    b.Navigation("ReceitasUtensilios");
                });
#pragma warning restore 612, 618
        }
    }
}
